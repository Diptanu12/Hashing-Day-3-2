Distinct Window
You are given a string s.

Your task is to find the smallest window of string with all distinct characters of the given string.

Input Format
First and only line of input contains a string s

Output Format
Return the smallest substring with all distinct characters of given string.

Example 1
Input

aabcbcdbca
Output

dbca
Explanation

Possible substrings= {aabcbcd, abcbcd, 
bcdbca, dbca....}
Of the set of possible substrings 'dbca' 
is the shortest substring having all the 
distinct characters of given string. 
Example 2
Input

aaab
Output

ab
Explanation

Possible substrings={aaab, aab, ab}
Of the set of possible substrings 'ab' 
is the shortest substring having all 
the distinct characters of given string. 
Constraints
1<=|s|<=10^4

Topics
Sliding Window
Arrays
Hashing
Strings


import java.util.*;

public class Main {

    public static String DistinctWindow(String s) {
        if (s == null || s.length() == 0) {
            return "";
        }


        Set<Character> uniqueChars = new HashSet<>();
        for (char c : s.toCharArray()) {
            uniqueChars.add(c);
        }
        
        int requiredUniqueCount = uniqueChars.size();
        
    
        Map<Character, Integer> windowCounts = new HashMap<>();
        int start = 0, end = 0;
        int minLength = Integer.MAX_VALUE;
        int minStart = 0;
        int uniqueCountInWindow = 0;
        
        while (end < s.length()) {
        
            char endChar = s.charAt(end);
            windowCounts.put(endChar, windowCounts.getOrDefault(endChar, 0) + 1);
            if (windowCounts.get(endChar) == 1) { 
                uniqueCountInWindow++;
            }
            
          
            while (uniqueCountInWindow == requiredUniqueCount) {
             
                if (end - start + 1 < minLength) {
                    minLength = end - start + 1;
                    minStart = start;
                }
                
          
                char startChar = s.charAt(start);
                windowCounts.put(startChar, windowCounts.get(startChar) - 1);
                if (windowCounts.get(startChar) == 0) {
                    uniqueCountInWindow--;
                }
                start++;
            }
            
            end++;
        }
        
        return minLength == Integer.MAX_VALUE ? "" : s.substring(minStart, minStart + minLength);
    }

    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String ans = DistinctWindow(s);
        System.out.println(ans);
    }
}
